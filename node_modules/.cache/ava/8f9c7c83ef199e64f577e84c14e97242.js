"use strict";

var _ava = _interopRequireDefault(require("ava"));

var _lib = _interopRequireDefault(require("../src/lib/lib"));

var _employee = _interopRequireDefault(require("../src/model/employee"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_ava.default.before(t => {
  t.context.employee = new _employee.default();
});

(0, _ava.default)("findEmployee() should return a employee with valid id", t => {
  let employee = t.context.employee;
  let employeeAlan = employee.findEmployee(100);
  t.deepEqual(employeeAlan, {
    "id": 100,
    "employee_name": "Alan",
    "manager_id": 150
  });
});
(0, _ava.default)("findEmployee() should return a undefined with valid id", t => {
  let employee = t.context.employee;
  let employeeError = employee.findEmployee(0);
  t.deepEqual(employeeError, undefined);
});
(0, _ava.default)("generateIndex() should return node array", t => {
  let employee = t.context.employee;
  let nodeArray = employee.generateIndex("root", "invalid");
  t.deepEqual(nodeArray['150'].length, 2);
  t.deepEqual(nodeArray['100'].length, 2);
  t.deepEqual(nodeArray['400'].length, 1);
  t.deepEqual(nodeArray['root'].length, 1);
  t.deepEqual(nodeArray['invalid'], undefined);
});
(0, _ava.default)("getRootEmployees() should returen all user without manager_id", t => {
  let employee = t.context.employee;
  let root = employee.getRootEmployees('root');
  t.deepEqual(root, {
    id: 150,
    deep: 0
  });
});
//# sourceMappingURL=/Users/mwonng/Desktop/Algorithm/interview/Momenton/node_modules/.cache/ava/8f9c7c83ef199e64f577e84c14e97242.js.map