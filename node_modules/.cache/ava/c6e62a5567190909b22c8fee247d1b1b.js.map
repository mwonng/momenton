{"version":3,"sources":["test/employee.test.js"],"names":["test","before","t","context","employee","Employee","employeeAlan","findEmployee","deepEqual","employeeError","undefined","nodeArray","generateIndex","length"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,aAAKC,MAAL,CAAaC,CAAC,IAAE;AACZA,EAAAA,CAAC,CAACC,OAAF,CAAUC,QAAV,GAAqB,IAAIC,iBAAJ,EAArB;AACH,CAFD;;AAIA,kBAAK,uDAAL,EAA8DH,CAAC,IAAI;AAC/D,MAAIE,QAAQ,GAAGF,CAAC,CAACC,OAAF,CAAUC,QAAzB;AACA,MAAIE,YAAY,GAAGF,QAAQ,CAACG,YAAT,CAAsB,GAAtB,CAAnB;AACAL,EAAAA,CAAC,CAACM,SAAF,CAAYF,YAAZ,EAAyB;AACrB,UAAM,GADe;AAErB,qBAAiB,MAFI;AAGrB,kBAAc;AAHO,GAAzB;AAKH,CARD;AAUA,kBAAK,wDAAL,EAA+DJ,CAAC,IAAI;AAChE,MAAIE,QAAQ,GAAGF,CAAC,CAACC,OAAF,CAAUC,QAAzB;AACA,MAAIK,aAAa,GAAGL,QAAQ,CAACG,YAAT,CAAsB,CAAtB,CAApB;AACAL,EAAAA,CAAC,CAACM,SAAF,CAAYC,aAAZ,EAA2BC,SAA3B;AACH,CAJD;AAMA,kBAAK,0CAAL,EAAiDR,CAAC,IAAI;AAClD,MAAIE,QAAQ,GAAGF,CAAC,CAACC,OAAF,CAAUC,QAAzB;AACA,MAAIO,SAAS,GAAGP,QAAQ,CAACQ,aAAT,CAAuB,MAAvB,EAA+B,SAA/B,CAAhB;AAEAV,EAAAA,CAAC,CAACM,SAAF,CAAYG,SAAS,CAAC,KAAD,CAAT,CAAiBE,MAA7B,EAAqC,CAArC;AACAX,EAAAA,CAAC,CAACM,SAAF,CAAYG,SAAS,CAAC,KAAD,CAAT,CAAiBE,MAA7B,EAAqC,CAArC;AACAX,EAAAA,CAAC,CAACM,SAAF,CAAYG,SAAS,CAAC,KAAD,CAAT,CAAiBE,MAA7B,EAAqC,CAArC;AACAX,EAAAA,CAAC,CAACM,SAAF,CAAYG,SAAS,CAAC,MAAD,CAAT,CAAkBE,MAA9B,EAAsC,CAAtC;AACH,CARD,E,CAUA;AACA;AACA;AACA;AACA","sourceRoot":"/Users/mwonng/Desktop/Algorithm/interview/Momenton","sourcesContent":["import test from 'ava';\nimport printIndent from '../src/lib/lib';\nimport Employee from '../src/model/employee';\n\ntest.before( t=>{\n    t.context.employee = new Employee();\n});\n\ntest(\"findEmployee() should return a employee with valid id\", t => {\n    let employee = t.context.employee;\n    let employeeAlan = employee.findEmployee(100);\n    t.deepEqual(employeeAlan,{\n        \"id\": 100,\n        \"employee_name\": \"Alan\",\n        \"manager_id\": 150\n    });\n})\n\ntest(\"findEmployee() should return a undefined with valid id\", t => {\n    let employee = t.context.employee\n    let employeeError = employee.findEmployee(0);\n    t.deepEqual(employeeError, undefined);\n})\n\ntest(\"generateIndex() should return node array\", t => {\n    let employee = t.context.employee\n    let nodeArray = employee.generateIndex(\"root\", \"invalid\");\n\n    t.deepEqual(nodeArray['150'].length, 2);\n    t.deepEqual(nodeArray['100'].length, 2);\n    t.deepEqual(nodeArray['400'].length, 1);\n    t.deepEqual(nodeArray['root'].length, 2);\n})\n\n// test(\"getRootEmployees() should returen all user without manager_id\", t => {\n//     let employee = t.context.employee\n//     let employeeError = employee.getRootEmployees(0);\n//     t.deepEqual(employeeError, undefined);\n// })"]}